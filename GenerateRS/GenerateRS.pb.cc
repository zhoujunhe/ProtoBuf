// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GenerateRS.proto

#include "GenerateRS.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AppleRemoteAuth {
PROTOBUF_CONSTEXPR RemoteDeviceInfo::RemoteDeviceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rq_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rq_sig_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_fair_play_guid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fair_play_certificate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fair_play_guid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grappa_session_id_)*/0u
  , /*decltype(_impl_.private_key_)*/0u
  , /*decltype(_impl_.fair_device_type_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoteDeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteDeviceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteDeviceInfoDefaultTypeInternal() {}
  union {
    RemoteDeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteDeviceInfoDefaultTypeInternal _RemoteDeviceInfo_default_instance_;
PROTOBUF_CONSTEXPR rsdata::rsdata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rs_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rs_sig_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ret_)*/false} {}
struct rsdataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR rsdataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~rsdataDefaultTypeInternal() {}
  union {
    rsdata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 rsdataDefaultTypeInternal _rsdata_default_instance_;
}  // namespace AppleRemoteAuth
static ::_pb::Metadata file_level_metadata_GenerateRS_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_GenerateRS_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_GenerateRS_2eproto = nullptr;

const uint32_t TableStruct_GenerateRS_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppleRemoteAuth::RemoteDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AppleRemoteAuth::RemoteDeviceInfo, _impl_.rq_data_),
  PROTOBUF_FIELD_OFFSET(::AppleRemoteAuth::RemoteDeviceInfo, _impl_.rq_sig_data_),
  PROTOBUF_FIELD_OFFSET(::AppleRemoteAuth::RemoteDeviceInfo, _impl_.grappa_session_id_),
  PROTOBUF_FIELD_OFFSET(::AppleRemoteAuth::RemoteDeviceInfo, _impl_.key_fair_play_guid_),
  PROTOBUF_FIELD_OFFSET(::AppleRemoteAuth::RemoteDeviceInfo, _impl_.fair_play_certificate_),
  PROTOBUF_FIELD_OFFSET(::AppleRemoteAuth::RemoteDeviceInfo, _impl_.fair_device_type_),
  PROTOBUF_FIELD_OFFSET(::AppleRemoteAuth::RemoteDeviceInfo, _impl_.private_key_),
  PROTOBUF_FIELD_OFFSET(::AppleRemoteAuth::RemoteDeviceInfo, _impl_.fair_play_guid_),
  PROTOBUF_FIELD_OFFSET(::AppleRemoteAuth::rsdata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AppleRemoteAuth::rsdata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AppleRemoteAuth::rsdata, _impl_.rs_data_),
  PROTOBUF_FIELD_OFFSET(::AppleRemoteAuth::rsdata, _impl_.ret_),
  PROTOBUF_FIELD_OFFSET(::AppleRemoteAuth::rsdata, _impl_.rs_sig_data_),
  ~0u,
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AppleRemoteAuth::RemoteDeviceInfo)},
  { 14, 23, -1, sizeof(::AppleRemoteAuth::rsdata)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AppleRemoteAuth::_RemoteDeviceInfo_default_instance_._instance,
  &::AppleRemoteAuth::_rsdata_default_instance_._instance,
};

const char descriptor_table_protodef_GenerateRS_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020GenerateRS.proto\022\017AppleRemoteAuth\"\325\001\n\020"
  "RemoteDeviceInfo\022\017\n\007rq_data\030\001 \001(\014\022\023\n\013rq_"
  "sig_data\030\002 \001(\014\022\031\n\021grappa_session_id\030\003 \001("
  "\r\022\032\n\022key_fair_play_guid\030\004 \001(\014\022\035\n\025fair_pl"
  "ay_certificate\030\005 \001(\014\022\030\n\020fair_device_type"
  "\030\006 \001(\003\022\023\n\013private_key\030\007 \001(\r\022\026\n\016fair_play"
  "_guid\030\010 \001(\t\"P\n\006rsdata\022\017\n\007rs_data\030\001 \001(\014\022\013"
  "\n\003ret\030\002 \001(\010\022\030\n\013rs_sig_data\030\003 \001(\014H\000\210\001\001B\016\n"
  "\014_rs_sig_data2Q\n\003aid\022J\n\nGenerateRS\022!.App"
  "leRemoteAuth.RemoteDeviceInfo\032\027.AppleRem"
  "oteAuth.rsdata\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_GenerateRS_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_GenerateRS_2eproto = {
    false, false, 424, descriptor_table_protodef_GenerateRS_2eproto,
    "GenerateRS.proto",
    &descriptor_table_GenerateRS_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_GenerateRS_2eproto::offsets,
    file_level_metadata_GenerateRS_2eproto, file_level_enum_descriptors_GenerateRS_2eproto,
    file_level_service_descriptors_GenerateRS_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_GenerateRS_2eproto_getter() {
  return &descriptor_table_GenerateRS_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_GenerateRS_2eproto(&descriptor_table_GenerateRS_2eproto);
namespace AppleRemoteAuth {

// ===================================================================

class RemoteDeviceInfo::_Internal {
 public:
};

RemoteDeviceInfo::RemoteDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AppleRemoteAuth.RemoteDeviceInfo)
}
RemoteDeviceInfo::RemoteDeviceInfo(const RemoteDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteDeviceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rq_data_){}
    , decltype(_impl_.rq_sig_data_){}
    , decltype(_impl_.key_fair_play_guid_){}
    , decltype(_impl_.fair_play_certificate_){}
    , decltype(_impl_.fair_play_guid_){}
    , decltype(_impl_.grappa_session_id_){}
    , decltype(_impl_.private_key_){}
    , decltype(_impl_.fair_device_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rq_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rq_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rq_data().empty()) {
    _this->_impl_.rq_data_.Set(from._internal_rq_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rq_sig_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rq_sig_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rq_sig_data().empty()) {
    _this->_impl_.rq_sig_data_.Set(from._internal_rq_sig_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_fair_play_guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_fair_play_guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_fair_play_guid().empty()) {
    _this->_impl_.key_fair_play_guid_.Set(from._internal_key_fair_play_guid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fair_play_certificate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fair_play_certificate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fair_play_certificate().empty()) {
    _this->_impl_.fair_play_certificate_.Set(from._internal_fair_play_certificate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fair_play_guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fair_play_guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fair_play_guid().empty()) {
    _this->_impl_.fair_play_guid_.Set(from._internal_fair_play_guid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grappa_session_id_, &from._impl_.grappa_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fair_device_type_) -
    reinterpret_cast<char*>(&_impl_.grappa_session_id_)) + sizeof(_impl_.fair_device_type_));
  // @@protoc_insertion_point(copy_constructor:AppleRemoteAuth.RemoteDeviceInfo)
}

inline void RemoteDeviceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rq_data_){}
    , decltype(_impl_.rq_sig_data_){}
    , decltype(_impl_.key_fair_play_guid_){}
    , decltype(_impl_.fair_play_certificate_){}
    , decltype(_impl_.fair_play_guid_){}
    , decltype(_impl_.grappa_session_id_){0u}
    , decltype(_impl_.private_key_){0u}
    , decltype(_impl_.fair_device_type_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rq_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rq_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rq_sig_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rq_sig_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_fair_play_guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_fair_play_guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fair_play_certificate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fair_play_certificate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fair_play_guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fair_play_guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoteDeviceInfo::~RemoteDeviceInfo() {
  // @@protoc_insertion_point(destructor:AppleRemoteAuth.RemoteDeviceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteDeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rq_data_.Destroy();
  _impl_.rq_sig_data_.Destroy();
  _impl_.key_fair_play_guid_.Destroy();
  _impl_.fair_play_certificate_.Destroy();
  _impl_.fair_play_guid_.Destroy();
}

void RemoteDeviceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AppleRemoteAuth.RemoteDeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rq_data_.ClearToEmpty();
  _impl_.rq_sig_data_.ClearToEmpty();
  _impl_.key_fair_play_guid_.ClearToEmpty();
  _impl_.fair_play_certificate_.ClearToEmpty();
  _impl_.fair_play_guid_.ClearToEmpty();
  ::memset(&_impl_.grappa_session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fair_device_type_) -
      reinterpret_cast<char*>(&_impl_.grappa_session_id_)) + sizeof(_impl_.fair_device_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteDeviceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes rq_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rq_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rq_sig_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rq_sig_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 grappa_session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grappa_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key_fair_play_guid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_key_fair_play_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes fair_play_certificate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_fair_play_certificate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fair_device_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.fair_device_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 private_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.private_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fair_play_guid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_fair_play_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AppleRemoteAuth.RemoteDeviceInfo.fair_play_guid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteDeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppleRemoteAuth.RemoteDeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rq_data = 1;
  if (!this->_internal_rq_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_rq_data(), target);
  }

  // bytes rq_sig_data = 2;
  if (!this->_internal_rq_sig_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_rq_sig_data(), target);
  }

  // uint32 grappa_session_id = 3;
  if (this->_internal_grappa_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_grappa_session_id(), target);
  }

  // bytes key_fair_play_guid = 4;
  if (!this->_internal_key_fair_play_guid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_key_fair_play_guid(), target);
  }

  // bytes fair_play_certificate = 5;
  if (!this->_internal_fair_play_certificate().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_fair_play_certificate(), target);
  }

  // int64 fair_device_type = 6;
  if (this->_internal_fair_device_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_fair_device_type(), target);
  }

  // uint32 private_key = 7;
  if (this->_internal_private_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_private_key(), target);
  }

  // string fair_play_guid = 8;
  if (!this->_internal_fair_play_guid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fair_play_guid().data(), static_cast<int>(this->_internal_fair_play_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppleRemoteAuth.RemoteDeviceInfo.fair_play_guid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_fair_play_guid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppleRemoteAuth.RemoteDeviceInfo)
  return target;
}

size_t RemoteDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppleRemoteAuth.RemoteDeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rq_data = 1;
  if (!this->_internal_rq_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rq_data());
  }

  // bytes rq_sig_data = 2;
  if (!this->_internal_rq_sig_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rq_sig_data());
  }

  // bytes key_fair_play_guid = 4;
  if (!this->_internal_key_fair_play_guid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key_fair_play_guid());
  }

  // bytes fair_play_certificate = 5;
  if (!this->_internal_fair_play_certificate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fair_play_certificate());
  }

  // string fair_play_guid = 8;
  if (!this->_internal_fair_play_guid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fair_play_guid());
  }

  // uint32 grappa_session_id = 3;
  if (this->_internal_grappa_session_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grappa_session_id());
  }

  // uint32 private_key = 7;
  if (this->_internal_private_key() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_private_key());
  }

  // int64 fair_device_type = 6;
  if (this->_internal_fair_device_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fair_device_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteDeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteDeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteDeviceInfo::GetClassData() const { return &_class_data_; }


void RemoteDeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteDeviceInfo*>(&to_msg);
  auto& from = static_cast<const RemoteDeviceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AppleRemoteAuth.RemoteDeviceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rq_data().empty()) {
    _this->_internal_set_rq_data(from._internal_rq_data());
  }
  if (!from._internal_rq_sig_data().empty()) {
    _this->_internal_set_rq_sig_data(from._internal_rq_sig_data());
  }
  if (!from._internal_key_fair_play_guid().empty()) {
    _this->_internal_set_key_fair_play_guid(from._internal_key_fair_play_guid());
  }
  if (!from._internal_fair_play_certificate().empty()) {
    _this->_internal_set_fair_play_certificate(from._internal_fair_play_certificate());
  }
  if (!from._internal_fair_play_guid().empty()) {
    _this->_internal_set_fair_play_guid(from._internal_fair_play_guid());
  }
  if (from._internal_grappa_session_id() != 0) {
    _this->_internal_set_grappa_session_id(from._internal_grappa_session_id());
  }
  if (from._internal_private_key() != 0) {
    _this->_internal_set_private_key(from._internal_private_key());
  }
  if (from._internal_fair_device_type() != 0) {
    _this->_internal_set_fair_device_type(from._internal_fair_device_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteDeviceInfo::CopyFrom(const RemoteDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppleRemoteAuth.RemoteDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDeviceInfo::IsInitialized() const {
  return true;
}

void RemoteDeviceInfo::InternalSwap(RemoteDeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rq_data_, lhs_arena,
      &other->_impl_.rq_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rq_sig_data_, lhs_arena,
      &other->_impl_.rq_sig_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_fair_play_guid_, lhs_arena,
      &other->_impl_.key_fair_play_guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fair_play_certificate_, lhs_arena,
      &other->_impl_.fair_play_certificate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fair_play_guid_, lhs_arena,
      &other->_impl_.fair_play_guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteDeviceInfo, _impl_.fair_device_type_)
      + sizeof(RemoteDeviceInfo::_impl_.fair_device_type_)
      - PROTOBUF_FIELD_OFFSET(RemoteDeviceInfo, _impl_.grappa_session_id_)>(
          reinterpret_cast<char*>(&_impl_.grappa_session_id_),
          reinterpret_cast<char*>(&other->_impl_.grappa_session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GenerateRS_2eproto_getter, &descriptor_table_GenerateRS_2eproto_once,
      file_level_metadata_GenerateRS_2eproto[0]);
}

// ===================================================================

class rsdata::_Internal {
 public:
  using HasBits = decltype(std::declval<rsdata>()._impl_._has_bits_);
  static void set_has_rs_sig_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

rsdata::rsdata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AppleRemoteAuth.rsdata)
}
rsdata::rsdata(const rsdata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  rsdata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rs_data_){}
    , decltype(_impl_.rs_sig_data_){}
    , decltype(_impl_.ret_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rs_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rs_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rs_data().empty()) {
    _this->_impl_.rs_data_.Set(from._internal_rs_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rs_sig_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rs_sig_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rs_sig_data()) {
    _this->_impl_.rs_sig_data_.Set(from._internal_rs_sig_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ret_ = from._impl_.ret_;
  // @@protoc_insertion_point(copy_constructor:AppleRemoteAuth.rsdata)
}

inline void rsdata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rs_data_){}
    , decltype(_impl_.rs_sig_data_){}
    , decltype(_impl_.ret_){false}
  };
  _impl_.rs_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rs_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rs_sig_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rs_sig_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

rsdata::~rsdata() {
  // @@protoc_insertion_point(destructor:AppleRemoteAuth.rsdata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void rsdata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rs_data_.Destroy();
  _impl_.rs_sig_data_.Destroy();
}

void rsdata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void rsdata::Clear() {
// @@protoc_insertion_point(message_clear_start:AppleRemoteAuth.rsdata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rs_data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.rs_sig_data_.ClearNonDefaultToEmpty();
  }
  _impl_.ret_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rsdata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes rs_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rs_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes rs_sig_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rs_sig_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* rsdata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppleRemoteAuth.rsdata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rs_data = 1;
  if (!this->_internal_rs_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_rs_data(), target);
  }

  // bool ret = 2;
  if (this->_internal_ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ret(), target);
  }

  // optional bytes rs_sig_data = 3;
  if (_internal_has_rs_sig_data()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_rs_sig_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppleRemoteAuth.rsdata)
  return target;
}

size_t rsdata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppleRemoteAuth.rsdata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rs_data = 1;
  if (!this->_internal_rs_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rs_data());
  }

  // optional bytes rs_sig_data = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rs_sig_data());
  }

  // bool ret = 2;
  if (this->_internal_ret() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData rsdata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    rsdata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*rsdata::GetClassData() const { return &_class_data_; }


void rsdata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<rsdata*>(&to_msg);
  auto& from = static_cast<const rsdata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AppleRemoteAuth.rsdata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rs_data().empty()) {
    _this->_internal_set_rs_data(from._internal_rs_data());
  }
  if (from._internal_has_rs_sig_data()) {
    _this->_internal_set_rs_sig_data(from._internal_rs_sig_data());
  }
  if (from._internal_ret() != 0) {
    _this->_internal_set_ret(from._internal_ret());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void rsdata::CopyFrom(const rsdata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppleRemoteAuth.rsdata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsdata::IsInitialized() const {
  return true;
}

void rsdata::InternalSwap(rsdata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rs_data_, lhs_arena,
      &other->_impl_.rs_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rs_sig_data_, lhs_arena,
      &other->_impl_.rs_sig_data_, rhs_arena
  );
  swap(_impl_.ret_, other->_impl_.ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata rsdata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GenerateRS_2eproto_getter, &descriptor_table_GenerateRS_2eproto_once,
      file_level_metadata_GenerateRS_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AppleRemoteAuth
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AppleRemoteAuth::RemoteDeviceInfo*
Arena::CreateMaybeMessage< ::AppleRemoteAuth::RemoteDeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppleRemoteAuth::RemoteDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AppleRemoteAuth::rsdata*
Arena::CreateMaybeMessage< ::AppleRemoteAuth::rsdata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppleRemoteAuth::rsdata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
